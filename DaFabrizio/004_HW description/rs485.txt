https://developer.toradex.com/knowledge-base/uart-linux

http://git.toradex.com/cgit/linux-toradex.git/tree/Documentation/serial/serial-rs485.txt?h=toradex_4.14-2.0.x-imx

programma di prova :

#include <stdio.h>
#include <linux/serial.h>
#include <fcntl.h>

/* Include definition for RS485 ioctls: TIOCGRS485 and TIOCSRS485 */
#include <sys/ioctl.h>

/* Open your specific device (e.g., /dev/mydevice): */


int main(int argc, char *argv[])
{
   printf("un inizio\n");
   int fd = open ("/dev/mydevice", O_RDWR);
   if (fd < 0) {
      /* Error handling. See errno. */
   }

   printf("un primo passo\n");

   struct serial_rs485 rs485conf;

   /* Enable RS485 mode: */
   rs485conf.flags |= SER_RS485_ENABLED;

   /* Set logical level for RTS pin equal to 1 when sending: */
   rs485conf.flags |= SER_RS485_RTS_ON_SEND;

   /* or, set logical level for RTS pin equal to 0 when sending: */
   rs485conf.flags &= ~(SER_RS485_RTS_ON_SEND);

   /* Set logical level for RTS pin equal to 1 after sending: */
   rs485conf.flags |= SER_RS485_RTS_AFTER_SEND;

   /* or, set logical level for RTS pin equal to 0 after sending: */
   rs485conf.flags &= ~(SER_RS485_RTS_AFTER_SEND);

   /* Set rts delay before send, if needed: */
   //rs485conf.delay_rts_before_send = ...;

   /* Set rts delay after send, if needed: */
   //rs485conf.delay_rts_after_send = ...;

   /* Set this flag if you want to receive data even whilst sending data */
   rs485conf.flags |= SER_RS485_RX_DURING_TX;

   if (ioctl (fd, TIOCSRS485, &rs485conf) < 0) {
      /* Error handling. See errno. */
   }

}
